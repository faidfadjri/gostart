package response

import (
	"encoding/json"
	"net/http"
)

type APIResponse struct {
	Success bool        `json:"success"`
	Message string      `json:"message"`
	Data    interface{} `json:"data,omitempty"`
	Errors  any         `json:"error,omitempty"`
}

func NewSuccessResponse(message string, data interface{}) APIResponse {
	return APIResponse{
		Success: true,
		Message: message,
		Data:    data,
	}
}

func NewErrorResponse(message string, err any) APIResponse {
	var errorData any
	switch e := err.(type) {
	case error:
		errorData = e.Error()
	case map[string]string, map[string]any:
		errorData = e
	default:
		errorData = e
	}

	return APIResponse{
		Success: false,
		Message: message,
		Errors:  errorData,
	}
}

func JSONResponse(w http.ResponseWriter, statusCode int, resp APIResponse) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(statusCode)
	json.NewEncoder(w).Encode(resp)
}

func Success(w http.ResponseWriter, message string, data interface{}) {
	JSONResponse(w, http.StatusOK, NewSuccessResponse(message, data))
}

func Created(w http.ResponseWriter, message string, data interface{}) {
	JSONResponse(w, http.StatusCreated, NewSuccessResponse(message, data))
}

func BadRequest(w http.ResponseWriter, message string, err any) {
	JSONResponse(w, http.StatusBadRequest, NewErrorResponse(message, err))
}

func Unauthorized(w http.ResponseWriter, message string, err any) {
	JSONResponse(w, http.StatusUnauthorized, NewErrorResponse(message, err))
}

func Forbidden(w http.ResponseWriter, message string, err any) {
	JSONResponse(w, http.StatusForbidden, NewErrorResponse(message, err))
}

func NotFound(w http.ResponseWriter, message string, err any) {
	JSONResponse(w, http.StatusNotFound, NewErrorResponse(message, err))
}

func InternalServerError(w http.ResponseWriter, message string, err any) {
	JSONResponse(w, http.StatusInternalServerError, NewErrorResponse(message, err))
}